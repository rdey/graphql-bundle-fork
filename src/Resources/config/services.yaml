parameters:
    redeye_graphql_types.config: []

services:
    Redeye\GraphQLBundle\Executor\Executor: ~
    Redeye\GraphQLBundle\Request\Parser: ~
    Redeye\GraphQLBundle\Request\BatchParser: ~
    GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter: ~
    Redeye\GraphQLBundle\Executor\Promise\Adapter\ReactPromiseAdapter: ~
    Redeye\GraphQLBundle\Resolver\FieldResolver: ~

    Redeye\GraphQLBundle\Federation\EntityTypeResolver\ChainEntityTypeResolver:
        arguments:
            $entityTypeResolvers: !tagged { tag: 'redeye_graphql.entity_type_resolver' }

    Redeye\GraphQLBundle\Command\DumpFederatedSchemaCommand:
        arguments:
            $requestExecutor: '@redeye_graphql.request_executor'
        tags:
            - { name: 'console.command', command: "redeye:graphql:dump-federated" }

    Redeye\GraphQLBundle\Federation\FederatedSchemaBuilder:
        arguments:
            $typeResolver: '@Redeye\GraphQLBundle\Resolver\TypeResolver'
            $entityTypeResolver: '@Redeye\GraphQLBundle\Federation\EntityTypeResolver\ChainEntityTypeResolver'

    Redeye\GraphQLBundle\DataLoader\Promise\Adapter\Webonyx\GraphQL\SyncPromiseAdapter: ~

    Redeye\GraphQLBundle\PromiseAdapter\Adapter\WebonyxGraphQLSyncPromiseAdapter:
        arguments:
            - '@Redeye\GraphQLBundle\DataLoader\Promise\Adapter\Webonyx\GraphQL\SyncPromiseAdapter'

    Redeye\GraphQLBundle\PromiseAdapter\PromiseAdapterInterface: '@Redeye\GraphQLBundle\PromiseAdapter\Adapter\WebonyxGraphQLSyncPromiseAdapter'

    Redeye\GraphQLBundle\Definition\GraphQLServices:
        tags: ['container.service_locator']

    Redeye\GraphQLBundle\Request\Executor:
        arguments:
            - "@redeye_graphql.executor"
            - "@redeye_graphql.promise_adapter"
            - "@event_dispatcher"
            - '@redeye_graphql.default_field_resolver'
            - "%redeye_graphql.use_experimental_executor%"
        calls:
            - ["setMaxQueryComplexity", ["%redeye_graphql.query_max_complexity%"]]
            - ["setMaxQueryDepth", ["%redeye_graphql.query_max_depth%"]]

    Redeye\GraphQLBundle\Definition\Builder\SchemaBuilder:
        arguments:
            - '@Redeye\GraphQLBundle\Resolver\TypeResolver'
            - false

    Redeye\GraphQLBundle\Definition\Builder\TypeFactory:
        arguments:
            - '@Redeye\GraphQLBundle\Definition\ConfigProcessor'
            - '@Redeye\GraphQLBundle\Definition\GraphQLServices'

    Redeye\GraphQLBundle\Resolver\TypeResolver:
        calls:
            - ['setDispatcher', ['@event_dispatcher']]
        tags:
            - { name: redeye_graphql.service, alias: typeResolver }

    Redeye\GraphQLBundle\Transformer\ArgumentsTransformer:
        arguments:
            - '@?validator'
            - '%redeye_graphql_types.classes_map%'

    Redeye\GraphQLBundle\Resolver\QueryResolver:
        tags:
            - { name: redeye_graphql.service, alias: queryResolver }

    Redeye\GraphQLBundle\Resolver\MutationResolver:
        tags:
            - { name: redeye_graphql.service, alias: mutationResolver }

    Redeye\GraphQLBundle\Resolver\AccessResolver:
        arguments:
            - '@redeye_graphql.promise_adapter'

    Redeye\GraphQLBundle\ExpressionLanguage\ExpressionLanguage:
        arguments:
            - '@?redeye_graphql.cache_expression_language_parser'

    Redeye\GraphQLBundle\Generator\TypeGenerator:
        arguments:
            - '%redeye_graphql_types.config%'
            - '@Redeye\GraphQLBundle\Generator\TypeBuilder'
            - '@Symfony\Contracts\EventDispatcher\EventDispatcherInterface'
            - !service
                class: Redeye\GraphQLBundle\Generator\TypeGeneratorOptions
                arguments:
                    - '%redeye_graphql.class_namespace%'
                    - '%redeye_graphql.cache_dir%'
                    - '%redeye_graphql.use_classloader_listener%'
                    - '%kernel.cache_dir%'
                    - '%redeye_graphql.cache_dir_permissions%'

    Redeye\GraphQLBundle\Definition\ArgumentFactory:
        arguments:
            - '%redeye_graphql.argument_class%'
        tags:
            - { name: redeye_graphql.service, alias: argumentFactory }

    Redeye\GraphQLBundle\Controller\GraphController:
        public: true
        arguments:
            - '@Redeye\GraphQLBundle\Request\BatchParser'
            - '@Redeye\GraphQLBundle\Request\Executor'
            - '@Redeye\GraphQLBundle\Request\Parser'
            - "%redeye_graphql.handle_cors%"
            - "%redeye_graphql.batching_method%"

    Redeye\GraphQLBundle\Definition\ConfigProcessor:
        arguments:
            - !tagged_iterator 'redeye_graphql.definition_config_processor'

    GraphQL\Executor\Promise\PromiseAdapter: "@redeye_graphql.promise_adapter"

    Redeye\GraphQLBundle\Validator\Formatter:
        tags:
            - { name: kernel.event_listener, event: graphql.error_formatting, method: onErrorFormatting }

    Redeye\GraphQLBundle\Security\Security:
        arguments:
            - '@?security.helper'
        tags:
            - { name: redeye_graphql.service, alias: security, public: false }

    Redeye\GraphQLBundle\Generator\Converter\ExpressionConverter:
        arguments:
            - '@Redeye\GraphQLBundle\ExpressionLanguage\ExpressionLanguage'

    Redeye\GraphQLBundle\Generator\TypeBuilder:
        arguments:
            - '@Redeye\GraphQLBundle\Generator\Converter\ExpressionConverter'
            - '%redeye_graphql.class_namespace%'

    Redeye\GraphQLBundle\Validator\InputValidatorFactory:
        arguments:
            - '@?validator.validator_factory'
            - '@?validator'
            - '@?translator.default'
        tags:
            - { name: redeye_graphql.service, alias: input_validator_factory, public: false }
